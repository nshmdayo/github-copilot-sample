version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: todoapp-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: todoapp
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    networks:
      - todoapp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: docker/Dockerfile
      target: development
    container_name: todoapp-backend
    restart: unless-stopped
    environment:
      # Server
      PORT: 8080
      HOST: 0.0.0.0
      
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: password
      DB_NAME: todoapp
      DB_SSL_MODE: disable
      
      # JWT
      JWT_SECRET: your-secret-key-for-development
      JWT_EXPIRATION: 24h
      
      # Environment
      GO_ENV: development
      
      # CORS
      CORS_ORIGINS: "http://localhost:3000"
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - go_modules:/go/pkg/mod
    networks:
      - todoapp-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Next.js Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: todoapp-frontend
    restart: unless-stopped
    environment:
      # Next.js
      NEXT_PUBLIC_API_URL: http://localhost:8080/api
      NEXT_PUBLIC_APP_NAME: Todo App
      NODE_ENV: development
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - todoapp-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis (Optional - for caching and sessions)
  redis:
    image: redis:7-alpine
    container_name: todoapp-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - todoapp-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Nginx (Reverse Proxy for Production-like setup)
  nginx:
    image: nginx:alpine
    container_name: todoapp-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - todoapp-network
    profiles:
      - production

  # MinIO (S3-compatible object storage for local development)
  minio:
    image: minio/minio:latest
    container_name: todoapp-minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - todoapp-network
    command: server /data --console-address ":9001"
    profiles:
      - storage

  # Adminer (Database management)
  adminer:
    image: adminer:latest
    container_name: todoapp-adminer
    restart: unless-stopped
    ports:
      - "8081:8080"
    depends_on:
      - postgres
    networks:
      - todoapp-network
    profiles:
      - tools

  # pgAdmin (PostgreSQL management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: todoapp-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@todoapp.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "8082:80"
    depends_on:
      - postgres
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - todoapp-network
    profiles:
      - tools

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: todoapp-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - todoapp-network
    profiles:
      - monitoring

  # Grafana (Metrics visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: todoapp-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - todoapp-network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  pgadmin_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  go_modules:
    driver: local

networks:
  todoapp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 使用例:
# 基本開発環境: docker-compose up -d
# ツール付き: docker-compose --profile tools up -d
# 監視付き: docker-compose --profile monitoring up -d
# ストレージ付き: docker-compose --profile storage up -d
# 本番環境風: docker-compose --profile production up -d
# 全て: docker-compose --profile tools --profile monitoring --profile storage --profile production up -d
